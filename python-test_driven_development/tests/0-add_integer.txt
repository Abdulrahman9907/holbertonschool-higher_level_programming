The ``0-add_integer`` module
======================

Using ``add_integer``
-------------------

This is an example text file in reStructuredText format. First import
``add_integer`` from the ``0-add_integer`` module:

    >>> add_integer = __import__('0-add_integer').add_integer

Now use it:

Basic addition tests:
    >>> add_integer(1, 2)
    3

    >>> add_integer(100, -2)
    98

    >>> add_integer(2)
    100

Float to integer conversion:
    >>> add_integer(100.3, -2)
    98

    >>> add_integer(2.5, 3.5)
    5

    >>> add_integer(-1.5, 2.5)
    1

Type error tests:
    >>> add_integer(4, "School")
    Traceback (most recent call last):
    TypeError: b must be an integer

    >>> add_integer(None)
    Traceback (most recent call last):
    TypeError: a must be an integer

    >>> add_integer("hello", 2)
    Traceback (most recent call last):
    TypeError: a must be an integer

    >>> add_integer(1, None)
    Traceback (most recent call last):
    TypeError: b must be an integer

    >>> add_integer([1, 2], 3)
    Traceback (most recent call last):
    TypeError: a must be an integer

    >>> add_integer(1, [2, 3])
    Traceback (most recent call last):
    TypeError: b must be an integer

Edge cases:
    >>> add_integer(0, 0)
    0

    >>> add_integer(-1, -1)
    -2

    >>> add_integer(1000000, 2000000)
    3000000

Special float cases:
    >>> add_integer(float('inf'))
    Traceback (most recent call last):
    OverflowError: cannot convert float infinity to integer

    >>> add_integer(1, float('inf'))
    Traceback (most recent call last):
    OverflowError: cannot convert float infinity to integer

    >>> add_integer(float('-inf'))
    Traceback (most recent call last):
    OverflowError: cannot convert float infinity to integer

    >>> add_integer(float('nan'))
    Traceback (most recent call last):
    ValueError: cannot convert float NaN to integer

    >>> add_integer(1, float('nan'))
    Traceback (most recent call last):
    ValueError: cannot convert float NaN to integer