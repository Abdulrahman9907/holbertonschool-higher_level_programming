The ``1-my_list`` module
======================

Using ``MyList``
-------------------

Importing the class from the module:
    >>> MyList = __import__("1-my_list").MyList

Checking for module docstring:
    >>> m = __import__("1-my_list").__doc__
    >>> len(m) > 1
    True

Checking for class docstring:
    >>> c = __import__("1-my_list").MyList.__doc__
    >>> len(c) > 1
    True

Checking for method docstring:
    >>> mod = __import__("1-my_list").MyList.print_sorted.__doc__
    >>> len(mod) > 1
    True

Checking that MyList is a subclass of list:
    >>> issubclass(MyList, list)
    True

Checking for empty list:
    >>> my_list = MyList()
    >>> my_list.print_sorted()
    []

Checking that original list is unchanged:
    >>> my_list = MyList([1, 4, 2, 3, 5])
    >>> my_list.print_sorted()
    [1, 2, 3, 4, 5]
    >>> my_list
    [1, 4, 2, 3, 5]

Checking for list with one element:
    >>> my_list = MyList([1])
    >>> my_list.print_sorted()
    [1]
    >>> my_list
    [1]

Checking for sorted list:
    >>> my_list = MyList([1, 2, 3, 4, 5])
    >>> my_list.print_sorted()
    [1, 2, 3, 4, 5]

Checking for reverse sorted list:
    >>> my_list = MyList([5, 4, 3, 2, 1])
    >>> my_list.print_sorted()
    [1, 2, 3, 4, 5]

Checking for list with repeated elements:
    >>> my_list = MyList([1, 3, 2, 3, 2])
    >>> my_list.print_sorted()
    [1, 2, 2, 3, 3]

Checking for list with negative numbers:
    >>> my_list = MyList([1, -4, 2, -3, 5])
    >>> my_list.print_sorted()
    [-4, -3, 1, 2, 5]

Checking that we can add more elements:
    >>> my_list = MyList([1, 2, 3])
    >>> my_list.append(4)
    >>> my_list.print_sorted()
    [1, 2, 3, 4]

Checking for list with None:
    >>> my_list = MyList([1, None, 2])
    >>> my_list.print_sorted()
    Traceback (most recent call last):
    TypeError: '<' not supported between instances of 'NoneType' and 'int'